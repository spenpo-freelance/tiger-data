name: Backup Sync
on:
  workflow_dispatch:
    inputs:
      source_env:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - release
          - staging
      target_env:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      migrate_users:
        description: 'Users will be migrated from source to target environment'
        required: false
        type: boolean
        default: false
      additional_skip_tables:
        description: 'Additional tables to skip (comma-separated)'
        required: false
        type: string
      additional_sync_dirs:
        description: 'Additional directories or files to sync (comma-separated)'
        required: false
        type: string
      post_deploy_scripts:
        description: 'scripts to be run post deployment (comma-separated)'
        required: false
        type: string

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Environment Variables
        uses: ./.github/actions/set-env
        with:
          source_env: ${{ github.event.inputs.source_env }}
          target_env: ${{ github.event.inputs.target_env }}
          path: ${{ secrets.TIGER_GRADES_PATH }}

      - name: Backup Sync
        uses: spope851/wp-env-backup-sync@v1
        with:
          source_env: ${{ github.event.inputs.source_env }}
          target_env: ${{ github.event.inputs.target_env }}
          source_path: ${{ env.SOURCE_PATH }}
          target_path: ${{ env.TARGET_PATH }}
          domain: ${{ secrets.TIGER_GRADES_DOMAIN }}
          ssh_host: ${{ secrets.HOSTINGER_HOST }}
          ssh_username: ${{ secrets.HOSTINGER_USERNAME }}
          ssh_private_key: ${{ secrets.HOSTINGER_PRIVATE_KEY }}
          ssh_known_hosts: ${{ secrets.HOSTINGER_KNOWN_HOSTS }}
          ssh_key_type: ${{ secrets.HOSTINGER_KEY_TYPE }}
          ssh_port: ${{ secrets.HOSTINGER_PORT }}
          encryption_password: ${{ secrets.TIGER_GRADES_ENCRYPTION_PASSWORD }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_tables: ${{ 
              format('{0}{1}{2}',
                'wp_comments,wp_commentmeta,wp_litespeed_url,wp_litespeed_url_file,wp_user_registration_sessions',
                github.event.inputs.additional_skip_tables != '' && format(',{0}', github.event.inputs.additional_skip_tables) || '',
                github.event.inputs.migrate_users && '' || ',wp_users,wp_usermeta'
              )
            }}
          sync_content_dirs: ${{
              format('{0}{1}',
                'themes,plugins,uploads,mu-plugins,languages',
                github.event.inputs.additional_sync_dirs != '' && format(',{0}', github.event.inputs.additional_sync_dirs) || ''
              )
            }}
          clear_cache_commands: 'flush,transients,rewrite,litespeed'

  post-deploy:
    needs: sync
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.post_deploy_scripts != '' }}
    steps:
      - name: Set Environment Variables
        uses: ./.github/actions/set-env
        with:
          source_env: ${{ github.event.inputs.source_env }}
          target_env: ${{ github.event.inputs.target_env }}
          path: ${{ secrets.TIGER_GRADES_PATH }}

      - name: Post Deploy Activities
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_PRIVATE_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          script: |
            IFS=',' read -ra scripts <<< "${{ github.event.inputs.post_deploy_scripts }}"
            for script in "${scripts[@]}"; do
              echo "Validating script: $script"
              if [ ! -e "${{ env.TARGET_PATH }}/$script" ]; then
                echo "Script $script does not exist"
                exit 1
              fi

              echo "$script exists. Supported file types: .php, .sql"
              
              # Define array of supported file types
              supported_extensions=("php" "sql")
              
              # Get file extension and convert to lowercase
              file_extension="${script##*.}"
              file_extension="${file_extension,,}"
              
              # Check if extension is supported
              is_supported=false
              for ext in "${supported_extensions[@]}"; do
                if [ "$file_extension" = "$ext" ]; then
                  is_supported=true
                  break
                fi
              done
              
              if [ "$is_supported" = false ]; then
                echo "File type not supported. Supported types: ${supported_extensions[*]}"
                exit 1
              fi

              echo "Validation passed. Executing script..."
              if [ "$file_extension" = "php" ]; then
                php ${{ env.TARGET_PATH }}/$script
              elif [ "$file_extension" = "sql" ]; then
                cd ${{ env.TARGET_PATH }}
                wp db import $script
              fi
            done
